"""
Docker Compose configuration for the Enhanced MLOps Framework for Agentic AI RAG Workflows.

This file defines all services required to run the complete framework locally.
"""

version: '3.8'

services:
  # API Gateway - Entry point for all requests
  api-gateway:
    build:
      context: .
      dockerfile: docker/api-gateway/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - CONFIG_PATH=/app/config/medical_rag_config.yaml
      - LOG_LEVEL=INFO
      - VECTOR_DB_HOST=vector-db
      - AGENT_ORCHESTRATOR_HOST=agent-orchestrator
      - DOCUMENT_PROCESSOR_HOST=document-processor
      - COMPLIANCE_SERVICE_HOST=compliance-service
      - EVALUATION_SERVICE_HOST=evaluation-service
      - MONITORING_SERVICE_HOST=monitoring-service
    volumes:
      - ./config:/app/config
    depends_on:
      - agent-orchestrator
      - document-processor
      - vector-db
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agent Orchestrator - Manages and coordinates agents
  agent-orchestrator:
    build:
      context: .
      dockerfile: docker/agent-orchestrator/Dockerfile
    ports:
      - "8001:8001"
    environment:
      - CONFIG_PATH=/app/config/medical_rag_config.yaml
      - LOG_LEVEL=INFO
      - VECTOR_DB_HOST=vector-db
      - GOOGLE_APPLICATION_CREDENTIALS=/app/config/gcp-credentials.json
    volumes:
      - ./config:/app/config
    depends_on:
      - vector-db
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Document Processor - Handles document ingestion and processing
  document-processor:
    build:
      context: .
      dockerfile: docker/document-processor/Dockerfile
    ports:
      - "8002:8002"
    environment:
      - CONFIG_PATH=/app/config/medical_rag_config.yaml
      - LOG_LEVEL=INFO
      - VECTOR_DB_HOST=vector-db
      - GOOGLE_APPLICATION_CREDENTIALS=/app/config/gcp-credentials.json
    volumes:
      - ./config:/app/config
      - ./data:/app/data
    depends_on:
      - vector-db
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vector Database - Stores and retrieves vector embeddings
  vector-db:
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - vector-db-data:/data
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Compliance Service - Handles compliance and governance
  compliance-service:
    build:
      context: .
      dockerfile: docker/compliance-service/Dockerfile
    ports:
      - "8003:8003"
    environment:
      - CONFIG_PATH=/app/config/medical_rag_config.yaml
      - LOG_LEVEL=INFO
      - GOOGLE_APPLICATION_CREDENTIALS=/app/config/gcp-credentials.json
    volumes:
      - ./config:/app/config
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Evaluation Service - Handles model and response evaluation
  evaluation-service:
    build:
      context: .
      dockerfile: docker/evaluation-service/Dockerfile
    ports:
      - "8004:8004"
    environment:
      - CONFIG_PATH=/app/config/medical_rag_config.yaml
      - LOG_LEVEL=INFO
      - GOOGLE_APPLICATION_CREDENTIALS=/app/config/gcp-credentials.json
    volumes:
      - ./config:/app/config
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Service - Handles metrics and monitoring
  monitoring-service:
    build:
      context: .
      dockerfile: docker/monitoring-service/Dockerfile
    ports:
      - "8005:8005"
      - "9090:9090"  # Prometheus
    environment:
      - CONFIG_PATH=/app/config/medical_rag_config.yaml
      - LOG_LEVEL=INFO
    volumes:
      - ./config:/app/config
      - monitoring-data:/data
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cost Optimization Service - Handles cost monitoring and optimization
  cost-optimizer:
    build:
      context: .
      dockerfile: docker/cost-optimizer/Dockerfile
    ports:
      - "8006:8006"
    environment:
      - CONFIG_PATH=/app/config/medical_rag_config.yaml
      - LOG_LEVEL=INFO
      - GOOGLE_APPLICATION_CREDENTIALS=/app/config/gcp-credentials.json
    volumes:
      - ./config:/app/config
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web UI - React-based user interface
  web-ui:
    build:
      context: .
      dockerfile: docker/web-ui/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_MONITORING_URL=http://localhost:8005
    depends_on:
      - api-gateway
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  rag-network:
    driver: bridge

volumes:
  vector-db-data:
  monitoring-data:
